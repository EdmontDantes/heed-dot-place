
<!doctype html>
<html lang="en">
  <head>
<%- include('../partials/head.ejs') %> 
    <title>Heed.place home</title>
    
  </head>
  <body>
    <%- include ('../partials/navbar.ejs') %>

        <main role="main" class="col-md-9 mx-sm-auto col-lg-10">
          <%- include('../partials/flashMessagesAndErrors.ejs') %>
          <% if (user) { %>
            <div id="canvas-holder" style="width:100%">
              <canvas id="chart-area"></canvas>
            </div>
            <button id="randomizeData">Randomize Data</button>
            <button id="addDataset">Add Dataset</button>
            <button id="removeDataset">Remove Dataset</button>
            <button id="addData">Add Data</button>
            <button id="removeData">Remove Data</button>
            <button id="changeCircleSize">Semi/Full Circle</button>

          <% } else if(!user)  { %>
          <div class="card">
            <div class="card-body">
              <div class="text-center card-title">public pomodoro countdown if you want extra feature please register and login</div>
                <div class="text-center h1 card-text">
                  <div id="pomodoroMain">
                   
                    <div class="values">00:25:00</div>
                      <div>
                          <button class="startButton">Start</button>
                        
                          <button class="stopButton">Stop</button>
                   
                      </div>
                    </div>
                </div>
                <div class="card-footer bg-transparent border-success">
                  <br />
                  <br />
          
                
                </div>
            </div>
          </div>
          <% } %>
        </main>
        <% for( let catIndex = 0; catIndex < projectsForChartJsHomeReports.length; catIndex++ ) { %>
          <div style="display: none; visibility: hidden;">
            <div id="categoryData<%- catIndex %>" style="display: none; visibility: hidden;">
              <div id="categoryName<%- catIndex %>" style="display: none; visibility: hidden;"><%= projectsForChartJsHomeReports[catIndex].category[0].categoryName %></div>
              <div id="categoryColor<%- catIndex %>" style="display: none; visibility: hidden;"><%= projectsForChartJsHomeReports[catIndex].category[0].categoryColor %></div>
              <div id="categoryTaskTotalsForPomodoros<%- catIndex %>" style="display: none; visibility: hidden;"><% let totalPomodoroCountForGivenCategory = 0 %>
                                                                                                                  <% for( let countTaskPomdorosIndex = 0; countTaskPomdorosIndex < projectsForChartJsHomeReports[catIndex].tasks.length; countTaskPomdorosIndex++ ) { %>
                                                                                                                    <% totalPomodoroCountForGivenCategory += Number(projectsForChartJsHomeReports[catIndex].tasks[countTaskPomdorosIndex].task.pomodorosDone) %>
                                                                                                                  <% } %>
                                                                                                                  <%= totalPomodoroCountForGivenCategory %> 
                                                                                                                  
            </div>
          </div>
        <% } %>
    <%- include ('../partials/footer.ejs') %>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/easytimer@1.1.1/src/easytimer.min.js"></script>
    <script>

      'use strict';

      window.chartColors = {
        red: '#4dc9f6',
        orange: '#f67019',
        yellow: 'rgb(255, 205, 86)',
        green: 'rgb(75, 192, 192)',
        blue: 'rgb(54, 162, 235)',
        purple: 'rgb(153, 102, 255)',
        grey: 'rgb(201, 203, 207)'
      };
      
      (function(global) {
        let MONTHS = [
          'January',
          'February',
          'March',
          'April',
          'May',
          'June',
          'July',
          'August',
          'September',
          'October',
          'November',
          'December'
        ];
      
        let COLORS = [
          '#4dc9f6',
          '#f67019',
          '#f53794',
          '#537bc4',
          '#acc236',
          '#166a8f',
          '#00a950',
          '#58595b',
          '#8549ba'
        ];
      
        let Samples = global.Samples || (global.Samples = {});
        let Color = global.Color;
      
        Samples.utils = {
          // Adapted from http://indiegamr.com/generate-repeatable-random-numbers-in-js/
          srand: function(seed) {
            this._seed = seed;
          },
      
          rand: function(min, max) {
            let seed = this._seed;
            min = min === undefined ? 0 : min;
            max = max === undefined ? 1 : max;
            this._seed = (seed * 9301 + 49297) % 233280;
            return min + (this._seed / 233280) * (max - min);
          },
      
          numbers: function(config) {
            let cfg = config || {};
            let min = cfg.min || 0;
            let max = cfg.max || 1;
            let from = cfg.from || [];
            let count = cfg.count || 8;
            let decimals = cfg.decimals || 8;
            let continuity = cfg.continuity || 1;
            let dfactor = Math.pow(10, decimals) || 0;
            let data = [];
            let i, value;
      
            for (i = 0; i < count; ++i) {
              value = (from[i] || 0) + this.rand(min, max);
              if (this.rand() <= continuity) {
                data.push(Math.round(dfactor * value) / dfactor);
              } else {
                data.push(null);
              }
            }
      
            return data;
          },
      
          labels: function(config) {
            let cfg = config || {};
            let min = cfg.min || 0;
            let max = cfg.max || 100;
            let count = cfg.count || 8;
            let step = (max - min) / count;
            let decimals = cfg.decimals || 8;
            let dfactor = Math.pow(10, decimals) || 0;
            let prefix = cfg.prefix || '';
            let values = [];
            let i;
      
            for (i = min; i < max; i += step) {
              values.push(prefix + Math.round(dfactor * i) / dfactor);
            }
      
            return values;
          },
      
          months: function(config) {
            let cfg = config || {};
            let count = cfg.count || 12;
            let section = cfg.section;
            let values = [];
            let i, value;
      
            for (i = 0; i < count; ++i) {
              value = MONTHS[Math.ceil(i) % 12];
              values.push(value.substring(0, section));
            }
      
            return values;
          },
      
          color: function(index) {
            return COLORS[index % COLORS.length];
          },
      
          transparentize: function(color, opacity) {
            let alpha = opacity === undefined ? 0.5 : 1 - opacity;
            return Color(color).alpha(alpha).rgbString();
          }
        };
      
        // DEPRECATED
        window.randomScalingFactor = function() {
          return Math.round(Samples.utils.rand(-100, 100));
        };
      
        // INITIALIZATION
      
        Samples.utils.srand(Date.now());
      
        // Google Analytics
        /* eslint-disable */
        if (document.location.hostname.match(/^(www\.)?chartjs\.org$/)) {
          (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
          (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
          m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
          })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
          ga('create', 'UA-28909194-3', 'auto');
          ga('send', 'pageview');
        }
        /* eslint-enable */
      
      }(this));

    </script>
    
    
    
    
    
    <script>
            // Main Pomodoro
            let timer = new Timer();
            $('#pomodoroMain .startButton').click(function () {
                timer.start({ startValues: [0,0,25,0,0], countdown: true, target: [0,0,0,0,0] });
            });
            
            
            $('#pomodoroMain .stopButton').click(function () {
                timer.stop();
            });
      
            timer.addEventListener('targetAchieved', function (e) {
              let audio = new Audio('/assets/ringtones/Heed_ringtone_end_pomodoro.mp3');
              audio.play();
            });
      
            timer.addEventListener('secondsUpdated', function (e) {
                $('#pomodoroMain .values').html(timer.getTimeValues().toString());
            });
            
            timer.addEventListener('started', function (e) {
                $('#pomodoroMain .values').html(timer.getTimeValues().toString());
            });
    </script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.3/dist/Chart.min.js"></script>
    <script>
      let randomScalingFactor = function() {
        return Math.round(Math.random() * 100);
      };
  
      let config = {
        type: 'doughnut',
        data: {
          datasets: [{
            data: [
              randomScalingFactor(),
              randomScalingFactor(),
              randomScalingFactor(),
              randomScalingFactor(),
              randomScalingFactor(),
            ],
            backgroundColor: [
              window.chartColors.red,
              window.chartColors.orange,
              window.chartColors.yellow,
              window.chartColors.green,
              window.chartColors.blue,
            ],
            label: 'Dataset 1'
          }],
          labels: [
            'Red',
            'Orange',
            'Yellow',
            'Green',
            'Blue'
          ]
        },
        options: {
          responsive: true,
          legend: {
            position: 'top',
          },
          title: {
            display: true,
            text: 'Chart.js Doughnut Chart'
          },
          animation: {
            animateScale: true,
            animateRotate: true
          }
        }
      };
  
      window.onload = function() {
        let ctx = document.getElementById('chart-area').getContext('2d');
        window.myDoughnut = new Chart(ctx, config);
      };
  
      document.getElementById('randomizeData').addEventListener('click', function() {
        config.data.datasets.forEach(function(dataset) {
          dataset.data = dataset.data.map(function() {
            return randomScalingFactor();
          });
        });
  
        window.myDoughnut.update();
      });
  
      let colorNames = Object.keys(window.chartColors);
      document.getElementById('addDataset').addEventListener('click', function() {
        let newDataset = {
          backgroundColor: [],
          data: [],
          label: 'New dataset ' + config.data.datasets.length,
        };
  
        for (let index = 0; index < config.data.labels.length; ++index) {
          newDataset.data.push(randomScalingFactor());
  
          let colorName = colorNames[index % colorNames.length];
          let newColor = window.chartColors[colorName];
          newDataset.backgroundColor.push(newColor);
        }
  
        config.data.datasets.push(newDataset);
        window.myDoughnut.update();
      });
  
      document.getElementById('addData').addEventListener('click', function() {
        if (config.data.datasets.length > 0) {
          config.data.labels.push('data #' + config.data.labels.length);
  
          let colorName = colorNames[config.data.datasets[0].data.length % colorNames.length];
          let newColor = window.chartColors[colorName];
  
          config.data.datasets.forEach(function(dataset) {
            dataset.data.push(randomScalingFactor());
            dataset.backgroundColor.push(newColor);
          });
  
          window.myDoughnut.update();
        }
      });
  
      document.getElementById('removeDataset').addEventListener('click', function() {
        config.data.datasets.splice(0, 1);
        window.myDoughnut.update();
      });
  
      document.getElementById('removeData').addEventListener('click', function() {
        config.data.labels.splice(-1, 1); // remove the label first
  
        config.data.datasets.forEach(function(dataset) {
          dataset.data.pop();
          dataset.backgroundColor.pop();
        });
  
        window.myDoughnut.update();
      });
  
      document.getElementById('changeCircleSize').addEventListener('click', function() {
        if (window.myDoughnut.options.circumference === Math.PI) {
          window.myDoughnut.options.circumference = 2 * Math.PI;
          window.myDoughnut.options.rotation = -Math.PI / 2;
        } else {
          window.myDoughnut.options.circumference = Math.PI;
          window.myDoughnut.options.rotation = -Math.PI;
        }
  
        window.myDoughnut.update();
      });
    </script>
  </body>
</html>